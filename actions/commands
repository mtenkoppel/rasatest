
Welcome to Rasa X ðŸŽ‰

Rasa X is currently being deployed on your machine.

While you're waiting please add the following line to your terminal configuration  (depending on your operating system this is the '~/.bashrc' or '~/.zshrc' file).  This is needed so that you can access the embedded cluster using the 'kubectl' command  line interface.

	export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

Rasa X will be installed into the following Kubernetes namespace: rasa

Please save the following access credentials for later use:

Your Rasa X password is pdwAQX9SZDmKDqX3yMe-

The passwords for the other services in the deployment are:

Database password (PostgreSQL): ocOE2cp4lgVfPjzRv3SI
Event Broker password (RabbitMQ): lXLIlYCQw3CTnimsPfGx
Lock Store password (Redis): -wR0FACklmCEVZGH1F6a

Deploying Rasa X ...



rasa x --port 5006
rasa shell --debug --port 5008



ssh -i ~/Downloads/mauricesshkey.pem mauricetk@20.56.152.227
oyM6Q7bHMULmK-




~~~~~~~~~~~~~~~~~~
Rasa X is currently being deployed on your machine.

While you're waiting please add the following line to your terminal configuration  (depending on your operating system this is the '~/.bashrc' or '~/.zshrc' file).  This is needed so that you can access the embedded cluster using the 'kubectl' command  line interface.

        export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

Rasa X will be installed into the following Kubernetes namespace: rasa

Please save the following access credentials for later use:

Your Rasa X password is ueRA7xL7ei7TISgOCJ5R

The passwords for the other services in the deployment are:

Database password (PostgreSQL): 7tSP4egQOZtHG4BIUQN3
Event Broker password (RabbitMQ): 77wtw82jTpBhToSH7qQR
Lock Store password (Redis): ns2vYxe2Xo3NN3JFVH8X


sudo python3 rasa_x_commands.py create --update admin me ueRA7xL7ei7TISgOCJ5R


docker logs rasa_rasa-worker_1 --details

sudo docker-compose logs rasa-x
sudo docker-compose logs rasa-worker
sudo docker run mauricetk/rasa-custom-actions-booking-assistant:custom2 start



ADMIN PASSWORD RASA GOOGLE CLOUD
ueRA7xL7ei7TISgOCJ5R

BUILDING A DOCKER IMAGE:
docker build . -t mauricetk/rasa-custom-actions-booking-assistant:custom3
docker push mauricetk/rasa-custom-actions-booking-assistant:custom3

docker build . -t mauricetk/webservice:1
docker push mauricetk/webservice:1

RUNNING A DOCKER IMAGE ON LOCAL MACHINE:
docker run -p 5055:5055 mauricetk/rasa-custom-actions-booking-assistant:custom2
docker run -p 5000:5000 mauricetk/webservice:2

TESTING IF THE LOCAL DOCKER IMAGE WORKS:
curl -XPOST http://localhost:5055/webhooks/rest/webhook \
  -H "Content-type: application/json" \
  -d '{"sender": "test", "message": "hello"}'

STARTING DOCKER COMPOSE ON GOOGLE CLOUD:
cd /etc/rasa
sudo docker-compose up

If your docker.service enabled on system startup
$ sudo systemctl enable docker
and your services in your docker-compose.yml has
restart: always
all of the services run when you reboot your system if you run below command only once
docker-compose up -d

curl -sSL -o install.sh [https://storage.googleapis.com/rasa-x-releases/](https://storage.googleapis.com/rasa-x-releases/)0.35.1/install.sh
sudo bash ./install.sh


cd /etc/rasa
wget -qO docker-compose.yml https://storage.googleapis.com/rasa-x-releases/0.35.1/docker-compose.ce.yml
wget -qO rasa_x_commands.py https://storage.googleapis.com/rasa-x-releases/0.35.1/rasa_x_commands.py
curl -sSL -o install.sh https://storage.googleapis.com/rasa-x-releases/0.35.1/install.sh
sudo bash ./install.sh

DOCKER-COMPOSE.YML
version: "3.4"
x-database-credentials: &database-credentials
  DB_HOST: "db"
  DB_PORT: "5432"
  DB_USER: "${DB_USER:-admin}"
  DB_PASSWORD: "${DB_PASSWORD}"
  DB_LOGIN_DB: "${DB_LOGIN_DB:-rasa}"
x-rabbitmq-credentials: &rabbitmq-credentials
  RABBITMQ_HOST: "rabbit"
  RABBITMQ_USERNAME: "user"
  RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
x-redis-credentials: &redis-credentials
  REDIS_HOST: "redis"
  REDIS_PORT: "6379"
  REDIS_PASSWORD: ${REDIS_PASSWORD}
  REDIS_DB: "1"
x-duckling-credentials: &duckling-credentials
  RASA_DUCKLING_HTTP_URL: "http://duckling:8000"
x-rasax-credentials: &rasax-credentials
  RASA_X_HOST: "http://rasa-x:5002"
  RASA_X_USERNAME: ${RASA_X_USERNAME:-admin}
  RASA_X_PASSWORD: ${RASA_X_PASSWORD:-}
  RASA_X_TOKEN: ${RASA_X_TOKEN}
  JWT_SECRET: ${JWT_SECRET}
  RASA_USER_APP: "http://app:5055"
  RASA_PRODUCTION_HOST: "http://rasa-production:5005"
  RASA_WORKER_HOST: "http://rasa-worker:5005"
  RASA_TOKEN: ${RASA_TOKEN}

x-rasa-credentials: &rasa-credentials
  <<: *rabbitmq-credentials
  <<: *rasax-credentials
  <<: *database-credentials
  <<: *redis-credentials
  <<: *duckling-credentials
  RASA_TOKEN: ${RASA_TOKEN}
  RASA_MODEL_PULL_INTERVAL: 10
  RABBITMQ_QUEUE: "rasa_production_events"
  RASA_TELEMETRY_ENABLED: ${RASA_TELEMETRY_ENABLED:-true}

x-rasa-services: &default-rasa-service
  restart: always
  image: "rasa/rasa:${RASA_VERSION}-full"
  volumes:
      - ./.config:/.config
  expose:
    - "5005"
  command: >
    x
    --no-prompt
    --production
    --config-endpoint http://rasa-x:5002/api/config?token=${RASA_X_TOKEN}
    --port 5005
    --jwt-method HS256
    --jwt-secret ${JWT_SECRET}
    --auth-token '${RASA_TOKEN}'
    --cors "*"
  depends_on:
    - rasa-x
    - rabbit
    - redis

services:
  rasa-x:
    restart: always
    image: "rasa/rasa-x:${RASA_X_VERSION}"
    expose:
      - "5002"
    volumes:
      - ./models:/app/models
      - ./environments.yml:/app/environments.yml
      - ./credentials.yml:/app/credentials.yml
      - ./endpoints.yml:/app/endpoints.yml
      - ./logs:/logs
      - ./auth:/app/auth
    environment:
      <<: *database-credentials
      <<: *rasa-credentials
      SELF_PORT: "5002"
      DB_DATABASE: "${DB_DATABASE:-rasa}"
      RASA_MODEL_DIR: "/app/models"
      PASSWORD_SALT: ${PASSWORD_SALT}
      RABBITMQ_QUEUE: "rasa_production_events"
      RASA_X_USER_ANALYTICS: "0"
      SANIC_RESPONSE_TIMEOUT: "3600"
      RUN_DATABASE_MIGRATION_AS_SEPARATE_SERVICE: "true"
    depends_on:
      - db

db-migration:
    entrypoint: ["python"]
    command: ["-m", "rasax.community.services.db_migration_service"]
    restart: always
    image: "rasa/rasa-x:${RASA_X_VERSION}"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || kill 1"]
      interval: 5s
      timeout: 1s
      retries: 3
      start_period: 2s
    expose:
      - "8000"
    environment:
      <<: *database-credentials
      RUN_DATABASE_MIGRATION_AS_SEPARATE_SERVICE: "true"
      MPLCONFIGDIR: "/tmp/.matplotlib"
    depends_on:
      - db
rasa-production:
    <<: *default-rasa-service
    environment:
      <<: *rasa-credentials
      RASA_ENVIRONMENT: "production"
      DB_DATABASE: "tracker"
      MPLCONFIGDIR: "/tmp/.matplotlib"
      RASA_MODEL_SERVER: "http://rasa-x:5002/api/projects/default/models/tags/production"
  rasa-worker:
    <<: *default-rasa-service
    environment:
      <<: *rasa-credentials
      RASA_ENVIRONMENT: "worker"
      DB_DATABASE: "worker_tracker"
      MPLCONFIGDIR: "/tmp/.matplotlib"
      RASA_MODEL_SERVER: "http://rasa-x:5002/api/projects/default/models/tags/production"
  app:
    restart: always
    image: "mauricetk/rasa-custom-actions-booking-assistant:custom2"
    expose:
      - "5055"
    depends_on:
      - rasa-production

 db:
    restart: always
    image: "bitnami/postgresql:11.9.0"
    expose:
      - "5432"
    environment:
      POSTGRESQL_USERNAME: "${DB_USER:-admin}"
      POSTGRESQL_PASSWORD: "${DB_PASSWORD}"
      POSTGRESQL_DATABASE: "${DB_DATABASE:-rasa}"
    volumes:
      - ./db:/bitnami/postgresql
  rabbit:
    restart: always
    image: "bitnami/rabbitmq:3.8.9"
    environment:
      RABBITMQ_HOST: "rabbit"
      RABBITMQ_USERNAME: "user"
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_DISK_FREE_LIMIT: "{mem_relative, 0.1}"
    expose:
      - "5672"

duckling:
    restart: always
    image: "rasa/duckling:0.1.6.4"
    expose:
      - "8000"
    command: ["duckling-example-exe", "--no-access-log", "--no-error-log"]
  nginx:
    restart: always
    image: "rasa/nginx:${RASA_X_VERSION}"
    ports:
      - "80:8080"
      - "443:8443"
    volumes:
      - ./certs:/opt/bitnami/certs
      - ./terms:/opt/bitnami/nginx/conf/bitnami/terms
    depends_on:
      - rasa-x
      - rasa-production
      - app

 redis:
    restart: always
    image: "bitnami/redis:6.0.8"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    expose:
      - "6379"


